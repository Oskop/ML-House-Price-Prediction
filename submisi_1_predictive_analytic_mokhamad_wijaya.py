# -*- coding: utf-8 -*-
"""Submisi 1 Predictive Analytic - Mokhamad Wijaya.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Fn55rFOetNU7SYgDaMoARxcnBhDFh_B

# Data Loading
"""

!wget -c "https://storage.googleapis.com/kaggle-data-sets/3489360/6092787/bundle/archive.zip?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20230729%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20230729T102750Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=8124bc70d8af5407affa4b528a4b5b2e4916a0e0d7a54739ee559be7b33d59a2b7ef05d6bf865a544691acb82456631352f0f978b85c1fff81ed35c1dba228fa1120369cbc6bdb589fb35d01bc64ee56555829a1784799e7b084d597ff5af173df19278e25afdc8dba02ed4f30ab0fc140612a7627ac9b0a95235c48757f312602ab750edb57446daf6b1c81044070c64541126c03d138b70c0a2561693d0456a3d3168e89fbfc5391d4d58f4219654cf356fddfce3b4afa73e8690218215f358c259af9b6c14fb313e33af4be55be40880d7a4dc3601101c748a714ec0d11b9558c6b638fd5f58fd5f4a6829269a3d1c2b356af283aebd2bbd81db37b311f63" \
  -O archive.zip

!unzip archive.zip

import numpy as np
import pandas as pd

ds = pd.read_csv('Housing.csv')
ds.head()

ds.info()

"""# Exploratory Data Analysis

## Deskripsi Variabel

Berdasarkan informasi dari *Kaggle*, fitur-fitur pada Housing Price Prediction dataset adalah sebagai berikut:

- Price: harga dari sebuah rumah.

- Area: total luas rumah dalam satuan _feet_ persegi.

- Bedrooms: Jumlah kamar tidur di rumah.

- Bathrooms: Jumlah kamar mandi di dalam rumah.

- Stories: Jumlah cerita atau kisah yang ada pada rumah.

- Mainroad: apakah rumah terhubung ke jalan utama (Yes/No).

- Guestroom: apakah rumah memiliki ruang tamu (Yes/No).

- Basement: apakah rumah memiliki _basement_ (Yes/No).

- Hot water heating: apakah rumah memiliki sistem pemanas air (Yes/No).

- Airconditioning: apakah rumah memiliki sistem penyejuk udara atau AC (Yes/No).

- Parking: jumlah ruang/lahan parkir yang tersedia di dalam rumah.

- Prefarea: apakah rumah terletak di area pilihan (Yes/No).

- Furnishing status: status perabotan rumah (Fully Furnished, Semi-Furnished, Unfurnished).

Selanjutnya adalah mengecek informasi dataset
"""

ds.info()

ds.describe()

"""## Periksa Duplikasi Data"""

dpl = ds[ds.duplicated()]
print("jumlah baris duplikasi: ", dpl.shape[0])

"""## Periksa Missing Value"""

ds.isnull().sum()

"""## Multivariate Analysis

Untuk melihat korelasi antar fitur, maka dibuat matriks korelasinya
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

fig, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(
    ds.corr(numeric_only=True), cmap='coolwarm', annot=True, fmt='.2f')
plt.title("Matriks Korelasi")
plt.show()

"""# Data Preparation

## Encoding

Terdapat tipe data kategori atau bukan numerik pada fitur mainroad, guestroom, basement, hotwaterheating, airconditioning, prefarea dan furnishingstatus. Dikarenakan model hanya dapat memproses data numerik, maka perlu pengubahan bentuk data dari fitur-fitur tersebut ke dalam bentuk numerik.

Untuk tipe data kategori dengan 2 nilai yang unik (mainroad, guestroom, basement, hotwaterheating, airconditioning, prefarea) maka akan diubah menjadi skala 0 (no) dan 1 (yes)
"""

from sklearn.preprocessing import LabelEncoder,OneHotEncoder

kolom_obyek = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']
label_encoder = LabelEncoder()
for col in kolom_obyek:
    ds[col] = label_encoder.fit_transform(ds[col])
ds.head()

"""Untuk tipe data kategori yang memiliki lebih dari 2 nilai unik, maka akan diurutkan berdasarkan nilai maknanya. Pada kasus fitur furnishingstatus, yang memiliki 3 nilai unik yang dapat diurutkan dari nilai kecil ke nilai besar (Unfurnished, Semi-Furnished, Fully Furnished) maka akan diwakilkan dalam bentuk numerik secara beruntun dengan nilai (0, 1, 2)"""

print(ds['furnishingstatus'].unique())
ds['furnishingstatus'] = ds['furnishingstatus'].replace(['unfurnished'], 0)
ds['furnishingstatus'] = ds['furnishingstatus'].replace(['semi-furnished'], 1)
ds['furnishingstatus'] = ds['furnishingstatus'].replace(['furnished'], 2)
print(ds['furnishingstatus'].unique())

# Matriks Korelasi setelah perubahan tipe data non numerik ke numerik
fig, ax = plt.subplots(figsize=(10, 8))
sns.heatmap(
    ds.corr(numeric_only=True), cmap='coolwarm', annot=True, fmt='.2f')
plt.title("Matriks Korelasi")
plt.show()

"""Dikarenakan terdapat korelasi fitur dengan nilai dibawah 0.3 (hotwaterheating, guestroom, basement), maka fitur tersebut akan di-_drop_."""

ds.drop(['hotwaterheating', 'guestroom', 'basement'], axis=1, inplace=True)
ds.head()

"""##hotwaterheatingTrain-Test Split"""

from sklearn.model_selection import train_test_split

X = ds.drop(["price"],axis =1)
y = ds["price"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)
print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""## Standarization"""

ds.columns

from sklearn.preprocessing import StandardScaler

numerical_features = list(ds.columns)[1:]
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(2)

"""# Model Development"""

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'LinearRegression'])

from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Pelatihan model dengan metode KNN
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
models.loc['train_mse','KNN'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

# Pelatihan model dengan metode Random Forest Regression
rf = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
rf.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=rf.predict(X_train), y_true=y_train)

# Pelatihan model dengan metode Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lr.predict(X_train), y_true=y_train)

"""# Evaluasi Model"""

# Scalling data test
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Cek nilai mean dan deviasi
X_test.describe().round(2)

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RandomForest': rf, 'LinearRegression': lr}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    models.loc['train_mse', name] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    models.loc['test_mse', name] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil models
models

"""Untuk memudahkan pembacaan nilai MSE pada model, maka dibuat grafik error"""

fig, ax = plt.subplots()
models.T.sort_values(by='test_mse', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)
plt.title('Grafik Perbandingan nilai MSE')
plt.show()